{"version":3,"sources":["helpers.js","components/StorePicker.js","components/Header.js","components/AddFishForm.js","components/EditFishForm.js","components/Login.js","base.js","components/Inventory.js","components/Order.js","sample-fishes.js","components/Fish.js","components/App.js","components/NotFound.js","components/Router.js","index.js"],"names":["formatPrice","cents","toLocaleString","style","currency","rando","arr","Math","floor","random","length","getFunName","adjectives","StorePicker","myInput","React","createRef","goToStore","e","preventDefault","storeName","current","value","props","history","push","action","className","onSubmit","this","type","name","ref","required","placeholder","defaultValue","Component","Header","tagline","age","AddFishForm","nameRef","priceRef","statusRef","descRef","imageRef","createFish","fish","price","parseFloat","status","desc","image","addFish","currentTarget","reset","EditFishForm","handleChange","event","console","log","formUpdatedFish","updateFish","index","onChange","onClick","deleteFish","Login","authenticate","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","Inventory","state","uid","owner","authHandler","authData","a","fetch","storeId","context","store","post","data","user","setState","provider","authProvider","auth","signInWithPopup","then","logout","signOut","onAuthStateChanged","Object","keys","fishes","map","key","loadSampleFishes","Order","handleRemove","removedFish","dataset","removeFromOrder","renderOrder","count","order","isAvailable","transitionOptions","classNames","timeout","enter","exit","component","orderIds","total","reduce","prevTotal","fish1","fish2","fish3","fish4","fish5","fish6","fish7","fish8","fish9","Fish","handleClick","addToOrder","details","src","alt","disabled","App","Date","now","sampleFishes","updatedFish","params","match","localStorageRef","localStorage","getItem","storeid","JSON","parse","syncState","setItem","stringify","removeBinding","propType","PropTypes","object","NotFound","Router","BrowserRouter","Switch","Route","exact","path","render","document","querySelector"],"mappings":"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","file":"static/js/main.c2e66c1f.chunk.js","sourcesContent":["export function formatPrice(cents) {\n  return (cents / 100).toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\n\nexport function rando(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function slugify(text) {\n  return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/[^\\w-]+/g, \"\")\n    .replace(/--+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\");\n}\n\nexport function getFunName() {\n  const adjectives = [\n    \"adorable\",\n    \"beautiful\",\n    \"clean\",\n    \"drab\",\n    \"elegant\",\n    \"fancy\",\n    \"glamorous\",\n    \"handsome\",\n    \"long\",\n    \"magnificent\",\n    \"old-fashioned\",\n    \"plain\",\n    \"quaint\",\n    \"sparkling\",\n    \"ugliest\",\n    \"unsightly\",\n    \"angry\",\n    \"bewildered\",\n    \"clumsy\",\n    \"defeated\",\n    \"embarrassed\",\n    \"fierce\",\n    \"grumpy\",\n    \"helpless\",\n    \"itchy\",\n    \"jealous\",\n    \"lazy\",\n    \"mysterious\",\n    \"nervous\",\n    \"obnoxious\",\n    \"panicky\",\n    \"repulsive\",\n    \"scary\",\n    \"thoughtless\",\n    \"uptight\",\n    \"worried\"\n  ];\n\n  const nouns = [\n    \"women\",\n    \"men\",\n    \"children\",\n    \"teeth\",\n    \"feet\",\n    \"people\",\n    \"leaves\",\n    \"mice\",\n    \"geese\",\n    \"halves\",\n    \"knives\",\n    \"wives\",\n    \"lives\",\n    \"elves\",\n    \"loaves\",\n    \"potatoes\",\n    \"tomatoes\",\n    \"cacti\",\n    \"foci\",\n    \"fungi\",\n    \"nuclei\",\n    \"syllabuses\",\n    \"analyses\",\n    \"diagnoses\",\n    \"oases\",\n    \"theses\",\n    \"crises\",\n    \"phenomena\",\n    \"criteria\",\n    \"data\"\n  ];\n\n  return `${rando(adjectives)}-${rando(adjectives)}-${rando(nouns)}`;\n}\n","import React from 'react';\nimport { getFunName } from '../helpers';\nimport PropTypes from \"prop-types\";\n\n/*\n\n- Every class has a method which we call render().\n- render() determines what html and dom element will be put on the page\n- Let's set our render() method, and have it return some HTML\n- Now we need to Mount our Application.\n- When using react, we don't interact with DOM elements directly, like when using plain JavaScript.The only exception is when we mount our Application.\n- Finally we need to render our app by calling the render method, which takes 2 arguments (component, mounting point).\n*/\n\n\n// Without JSX\n\n/* \nclass StorePicker extends React.Component {\n    render() {\n        // return React.createElement('p', { className: 'hey' }, 'Hey Magic!');\n    }\n} */\n\n\n// With JSX\n\nclass StorePicker extends React.Component {\n\n    static propTypes = {\n        history: PropTypes.object\n    }\n\n    // Let's create a react reference for our input field\n    myInput = React.createRef();\n\n\n    /* BINDING METHODS TO CURRENT COMPONENT */\n\n\n    /* \n        Method 1 -> Binding methods with constructors - A bit of a long way.... \n    */\n\n    // let's create a constructor to bind the StorePicker component 'this' to our custom methods (ex: goToStore)\n\n\n    /*     constructor() {\n            // we need to run this super method first to make sure our React component is loaded first.\n            super();\n    \n            // Let's bind our instance component StorePicker 'this' to the goToStore method.\n            this.goToStore = this.goToStoreOld.bind(this);\n    \n            // The above binding solution is okay to work with, however it is not optimal when dealing with several methods  \n    \n        }\n    \n        goToStoreOld(e) {\n            e.preventDefault();\n            console.log(this);\n        }\n     */\n\n\n\n    /* \n    \n        Method 2 -> Binding methods using properties, or methods declared as function expressions - The short form\n\n        👉 ..And we don't need to create a constructor\n        \n    */\n\n    goToStore = (e) => {\n        e.preventDefault();\n        const storeName = this.myInput.current.value;\n        this.props.history.push(`/store/${ storeName }`);\n    }\n\n\n    render() {\n        return (\n            <>\n                <form action=\"\" className=\"store-selector\" onSubmit={this.goToStore}>\n                    {/* This is a comment */}\n                    <h2 className=\"title\">Please Enter a Store</h2>\n                    <input\n                        type=\"text\"\n                        name=\"storeName\"\n                        ref={this.myInput}\n                        required\n                        placeholder=\"Store Name\"\n                        defaultValue={getFunName()}\n                    />\n                    <button type=\"submit\"> Visit Store → </button>\n                </form>\n            </>\n        )\n    }\n}\n\nexport default StorePicker;\n\n\n\n// 03 HTML with JSX","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nconst Header = ({ tagline, age }) => (\n    <header className=\"top\">\n        <h1>\n            Catch\n            <span className=\"ofThe\">\n                <span className=\"of\">of</span>\n                <span className=\"the\">The</span>\n            </span>\n                    Day\n                </h1>\n        <h3 className=\"tagline\">\n            <span>{tagline} {age}</span>\n        </h3>\n    </header>\n)\n\n\nHeader.propTypes = {\n    tagline: PropTypes.string.isRequired\n}\n\nexport default Header;\n\n\n\n/* class Header extends React.Component {\n    render() {\n        return (\n            <header className=\"top\">\n                <h1>\n                    Catch\n                    <span className=\"ofThe\">\n                        <span className=\"of\">of</span>\n                        <span className=\"the\">The</span>\n                    </span>\n                    Day\n                </h1>\n                <h3 className=\"tagline\">\n                    <span>{this.props.tagline}</span>\n                </h3>\n            </header>\n        )\n    }\n}\n */\n\n/* Since this is a component that has one method - render(), we can make it a Stateless functional component */\n\n// Since this is a function we cannot have the \"this\" keyword to call the prop. Instead we set a 'props' as a parameter to the function.\n\n/* function Header(props) {\n    return (\n        <header className=\"top\">\n            <h1>\n                Catch\n                <span className=\"ofThe\">\n                    <span className=\"of\">of</span>\n                    <span className=\"the\">The</span>\n                </span>\n                    Day\n                </h1>\n            <h3 className=\"tagline\">\n                <span>{props.tagline}</span>\n            </h3>\n        </header>\n    )\n} */\n\n\n// Now the ES6 way, with an arrow function and an implicit return\n\n/* const Header = (props) => (\n    <header className=\"top\">\n        <h1>\n            Catch\n            <span className=\"ofThe\">\n                <span className=\"of\">of</span>\n                <span className=\"the\">The</span>\n            </span>\n                    Day\n                </h1>\n        <h3 className=\"tagline\">\n            <span>{props.tagline}</span>\n        </h3>\n    </header>\n)\n */\n\n// Even further, since 'props' is an object containing all our props we can destructure it according to the number of props we have inside.","import React from 'react'\nimport PropTypes from \"prop-types\";\n\nclass AddFishForm extends React.Component {\n\n    static propTypes = {\n        addFish: PropTypes.func\n    }\n\n    nameRef = React.createRef();\n    priceRef = React.createRef();\n    statusRef = React.createRef();\n    descRef = React.createRef();\n    imageRef = React.createRef();\n\n    createFish = e => {\n        e.preventDefault();\n        const fish = {\n            name: this.nameRef.current.value,\n            price: parseFloat(this.priceRef.current.value),\n            status: this.statusRef.current.value,\n            desc: this.descRef.current.value,\n            image: this.imageRef.current.value\n        }\n\n        // Here we push the new fish data, up one level to 'Inventory' > then up one level to 'App',  where it gets saved in our state component.\n        this.props.addFish(fish);\n\n\n        // After adding the new fish data, we need to reset the form\n\n        e.currentTarget.reset();\n\n    }\n\n    render() {\n        return (\n            <form className=\"fish-edit\" onSubmit={this.createFish}>\n                <input name=\"name\" ref={this.nameRef} type=\"text\" placeholder=\"Name\" />\n                <input name=\"price\" ref={this.priceRef} type=\"text\" placeholder=\"Price\" />\n                <select name=\"status\" ref={this.statusRef} >\n                    <option value=\"available\">Fresh!</option>\n                    <option value=\"unavailable\">Sold Out!</option>\n                </select>\n                <textarea name=\"desc\" ref={this.descRef} placeholder=\"Desc\" ></textarea>\n                <input name=\"image\" ref={this.imageRef} type=\"text\" placeholder=\"Image\" />\n\n                <button type=\"submit\"> + Add Fish </button>\n            </form>\n        )\n    }\n}\n\nexport default AddFishForm;\n\n\n// 1. create the form\n// 2. add event listener on form submit\n// 3. add ref to each element on the form","import React from 'react';\nimport PropTypes from \"prop-types\";\n\n\nclass EditFishForm extends React.Component {\n\n    static propTypes = {\n        fish: PropTypes.shape({\n            image: PropTypes.string,\n            name: PropTypes.string,\n            desc: PropTypes.string,\n            status: PropTypes.string,\n            // price: PropTypes.number\n        }),\n        updateFish: PropTypes.func,\n        index: PropTypes.string\n    }\n\n    handleChange = event => {\n        console.log(event.currentTarget.value);\n        // Now if we try to type in something in the input field, we won't be able to see all our updates.\n\n        // To be able to save our updated fish we first need to take a copy of the current fish, update it with the typed in value and send it to state.\n\n        // 1. Take a copy of the current fish\n        // remember here our prop in Inventory is fish (not fishes) \n\n        // We spread our fish prop, and to dynamically update all the fish properties values (name, price, status etc.), and for that We use the 'ES6 Computed property names' to do it all at once. \n\n        // Notice in our 'EditFishForm' form we have added a name tag to each input field. That is to allow us to figure out the name of each input field that is being updated. You can try by simply logging (event.currentTarget.name)\n\n        // Now that we know what our input field name tag is used for let's use its dynamic current value inside [] as a 'Computed Property Name'.\n\n        const formUpdatedFish = {\n            ...this.props.fish,\n            [event.currentTarget.name]: event.currentTarget.value,\n            // name: event.currentTarget.value // This is would be too repetitive.        \n        }\n\n        // Everytime we update our form fields, the above will give us a new value without saving the previous one. For that we need to update our State. To do so we need to create a function that handles that. \n\n        // ===> let's look at our App component 👀 => specifically our updateFish method\n\n\n        // Now after having checked our new updateFish() method, let's call it with required params. \n\n        // This will update our State, and render the new values on any component connected to our State.\n\n        this.props.updateFish(this.props.index, formUpdatedFish);\n\n        // console.log(updatedFish);\n\n\n\n        // 3. Submit it to our state\n\n    }\n\n    render() {\n        const { name, price, status, desc, image } = this.props.fish;\n\n        return <div className=\"fish-edit\">\n            <input type=\"text\" name=\"name\" onChange={this.handleChange} value={name} />\n            <input type=\"text\" name=\"price\" onChange={this.handleChange} value={price} />\n            <select type=\"text\" name=\"status\" onChange={this.handleChange} value={status}>\n                <option value=\"available\">Fresh!</option>\n                <option value=\"unavailable\">Sold Out!</option>\n            </select>\n            <textarea name=\"desc\" onChange={this.handleChange} value={desc}>{desc}</textarea>\n            <input type=\"text\" name=\"image\" onChange={this.handleChange} value={image} />\n\n            <button type=\"button\" name=\"delete\" onClick={() => this.props.deleteFish(this.props.index)}>Delete</button>\n        </div>\n    }\n}\n\nexport default EditFishForm;","import React from 'react';\nimport PropTypes from \"prop-types\";\n\n\nconst Login = (props) => (\n    <nav className=\"login\">\n        <h2> Inventory Login </h2>\n        <p>Sign in to manage your store's inventory</p>\n        <button className=\"github\" onClick={() => props.authenticate('Github')}>Log In With Github</button>\n        <button className=\"facebook\" onClick={() => props.authenticate('Facebook')}>Log In With Facebook</button>\n    </nav>\n)\n\n// Since we're inside a stateless functional Component, we cannot use static \n\nLogin.propTypes = {\n    authenticate: PropTypes.func.isRequired\n}\n\n\nexport default Login;","import Rebase from 're-base';\nimport firebase from 'firebase';\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyBhOd5U2jh3k7PMl5uXp_VCuPOIsZl_DM0\",\n    authDomain: \"catch-of-the-day-zakariaelk.firebaseapp.com\",\n    databaseURL: \"https://catch-of-the-day-zakariaelk.firebaseio.com\"\n})\n\n\n\n// Firebase makes persisting your data easy to implement. re-base, inspired by Relay, combines the benefits of React and Firebase by allowing each component to specify its own data dependency. Forget about your data persistence and focus on what really matters, your application's state.\n\nconst base = Rebase.createClass(firebaseApp.database());\n\n\n// our fireBaseApp is a named export as it serves us to find our base.\nexport { firebaseApp };\n\n// our main thing that we're exporting from this file is our base\nexport default base;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport firebase from 'firebase';\nimport AddFishForm from './AddFishForm';\nimport EditFishForm from './EditFishForm';\nimport Login from './Login';\nimport base, { firebaseApp } from '../base';\n\nclass Inventory extends React.Component {\n    static propTypes = {\n        fishes: PropTypes.object,\n        updateFish: PropTypes.func,\n        deleteFish: PropTypes.func,\n        loadSampleFishes: PropTypes.func\n    }\n\n    // Let's add our inventory state with our owner and uid set to null on pageload.\n\n    state = {\n        uid: null,\n        owner: null\n    }\n\n\n    componentDidMount() {\n        // Everytime we try to load the page, firebase will see if we're actually logged in and authenticated and if it's true, it will pass us a user, which itself will be passed to our authHandler which in turn will do all the checks so see if the user is the owner or not and do the rest of its job (inside the function)\n        firebase.auth().onAuthStateChanged(user => {\n            if(user) {\n                this.authHandler({user}) // Here we're using the brackets {user} as our authHandler takes an object parameter which is 'authData'\n            }\n        })\n    }\n\n\n    // This function will allow us to have a payload of information about the user who signed in.\n    // Using that information we need to see if that person owns the store.        \n\n    authHandler = async authData => {\n        console.log(authData);\n\n        // We need to pass our storeId from App.js to our Inventory storeId={this.props.match.params.storeid}. You can look up the react component tree and track where the store id comes from.\n\n        // we'll also give it an object {content: this}, that will give it some info on how to fetch it.\n\n        // 1. look up the current store in the firebase DB\n\n        const store = await base.fetch(this.props.storeId, { context: this });\n\n        // 2. Claim it if there's no owner and save that Data to our DB\n\n        if (!store.owner) {\n            \n            // save it as our own, and here we'll do the opposite of fetching data. We will post data to our Firebase DB\n\n            // Remeber, we always use our base variable as it is the one that connects us to our Firebase DB. \n\n            // the authData.user.uid object path can be found inside our authData\n\n            // So what happens here is that once we login in, we fetch our storeId data on firebase, and check if there is an owner object, if not we add one using authData.user.uid which is in our authData\n\n            // the post() method first locate the store using the ${ this.props.storeId } and than adds an owner object `/owner` which in turn takes the uid we got from the firebase authData, under the object data: authData.user.uid\n\n            await base.post(`${ this.props.storeId }/owner`, {\n                data: authData.user.uid\n            });\n        }\n\n        // 3. Set the state of the inventory component to reflect the current user\n\n        // Notice that we are setting state outside the App component. This is totally fine, It's actually better to setState inside a component when we know that we will only need that data inside that component (Inventory). So we need to set the state as we did in ou App\n\n\n        this.setState({\n            uid: authData.user.uid,\n            owner: store.owner || authData.user.uid\n        })\n\n\n        console.log(store);\n    }\n\n    authenticate = (provider) => {\n        // const authProvider = new firebase.auth.GithubAuthProvider();\n        // const authProvider = new firebase.auth.FacebookAuthProvider();\n        // const authProvider = new firebase.auth.TwitterAuthProvider();\n\n        // Instead of having an authprovider variable for each provider, let's do it dynamically with one provider variable changing according what login button the user click on. Let's not forget to add () to call the auth function\n\n        const authProvider = new firebase.auth[`${ provider }AuthProvider`]();\n\n        //let's use our firebaseApp main object (previously used in our base.js), we run the auth() method against it, and attach a handler inside a then(), to define what we're going to do after a use click on sign in with a method.\n        firebaseApp.auth().signInWithPopup(authProvider).then(this.authHandler);\n    }\n\n    logout = async () => {\n        console.log(\"logging out\");\n\n        await firebase.auth().signOut();\n        this.setState({\n            uid: null\n        });\n    }\n\n    render() {\n        const logout = <button onClick={this.logout}>Log Out!</button>\n\n        // 1. check if they are logged in (remember here we're check the info that's been set to state, so we're using this.state)\n\n        if (!this.state.uid) {\n            return <Login authenticate={this.authenticate} />\n        }\n\n        // 2. check if they are not the owner of the store\n\n        if (this.state.uid !== this.state.owner) {\n            console.log(this.state.uid);\n            console.log(this.state.owner);\n            return (\n                <div>\n                    <p>Sorry, Only for Owners</p>\n                    {logout}\n                </div>\n            )\n\n\n        }\n        // 3. They must be the owner, just render the inventory.\n        return (\n            <div className=\"inventory\">\n\n                <h2>Inventory</h2>\n\n                {logout}\n\n                {Object.keys(this.props.fishes).map(key =>\n                    <EditFishForm\n                        key={key}\n                        index={key}\n                        fish={this.props.fishes[key]}\n                        updateFish={this.props.updateFish}\n                        deleteFish={this.props.deleteFish}\n                    />)}\n\n                <AddFishForm addFish={this.props.addFish} />\n\n                <button onClick={this.props.loadSampleFishes}>Load Sample Fishes</button>\n\n            </div>)\n    }\n}\n\nexport default Inventory;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { formatPrice } from '../helpers';\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nclass Order extends React.Component {\n\n    static propTypes = {\n        fishes: PropTypes.object,\n        order: PropTypes.object,\n        removeFromOrder: PropTypes.func\n    }\n\n    handleRemove = (event) => {\n        const removedFish = event.currentTarget.dataset.key;\n        this.props.removeFromOrder(removedFish);\n    }\n\n    renderOrder = (key) => {\n\n        // here we need variables to get fish and order information from our state         \n        // we need to get the fishes and order\n        const fish = this.props.fishes[key];\n        const count = this.props.order[key];\n        // let's check if our fish is available\n        const isAvailable = fish && fish.status === 'available';\n\n        const transitionOptions = {\n            classNames: \"order\",\n            key,\n            timeout: { enter: 500, exit: 500 }\n        };\n\n\n        // stop execution if NO fish - To prevent displaying 'Sorry fish is no longer available' before loading Firebase fish data and localStorage order data.\n\n        if (!fish) return null;\n\n        if (!isAvailable) {\n\n            return (\n                // react requires each child in an array or iterator to have a unique \"key\" prop. let's add it to our <li>\n\n                // <CSSTransition classNames=\"order\" key={key} timeout={{ enter: 250, exit: 25 }}>\n\n                // After setting the attributes in a variable \n\n                <CSSTransition {...transitionOptions}>\n                    <li key={key}>\n                        Sorry {fish ? fish.name : 'fish'} is no longer available\n    </li>\n                </CSSTransition>\n            )\n\n        }\n\n        // REMEMBER!! to wrap your return in parentheses and finish with a         \n        return (\n\n            // react requires each child in an array or iterator to have a unique \"key\" prop. let's add it to our <li>\n\n            //CSSTransition takes classNames, a key and a timeout that sets the speed of how fast these items will come in and go out. \n            <CSSTransition {...transitionOptions}>\n                <li key={key}>\n                    <span>\n                        <TransitionGroup component=\"span\" className=\"count\">\n                            <CSSTransition classNames=\"count\" key={count} timeout={{ enter: 500, exit: 500 }}>\n                                <span>{count}</span>\n                            </CSSTransition>\n                        </TransitionGroup>\n\n            lbs {fish.name}\n                    </span>\n    &nbsp;\n        <button onClick={() => this.props.removeFromOrder(key)}>&times;</button>\n                    {formatPrice(count * fish.price)}\n                </li>\n            </CSSTransition>\n        );\n    };\n\n\n    render() {\n\n        // We first get our orderIds\n        const orderIds = Object.keys(this.props.order);\n        const total = orderIds.reduce((prevTotal, key) => {\n            // we need to get the fishes\n            const fish = this.props.fishes[key]; // using the key to dynamically call each fish\n            // we need to get the order count for same fish\n            const count = this.props.order[key];\n\n            // we need to check if the fish is available or has been removed\n            const isAvailable = fish && fish.status === 'available';\n\n            // if available, we need to add up the prevtotal + (count * fish.price)\n            // Remeber that we're doing all this inside a reduce() so we need to return something.\n            if (isAvailable) {\n                return prevTotal + (count * fish.price);\n            } else {\n                return prevTotal // if not simply return prevtotal\n            }\n\n            // the reduce method has to have a starting value, for us that is 0.            \n        }, 0)\n\n\n        // since we have a lot of code going on in this component, and it it is not the reusable type (meaning that we don't need to separate it components). The solution is to create custom render functions that will make our callbacks for map() filter() etc. look cleaner. Let's create a custom render function to display the looped over order.\n\n        return (\n            <div className=\"order-wrap\">\n                <h2 className=\"order\">Order</h2>\n                <TransitionGroup component=\"ul\" className=\"order\">\n                    {/* {orderIds.map(key => <li>{key}</li> )} */}\n                    {orderIds.map(this.renderOrder)}\n                </TransitionGroup>\n\n                <div className=\"total\">\n                    <strong>\n                        Total:\n                        {formatPrice(total)}\n                    </strong>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Order;","// This is just some sample data so you don't have to think of your own!\nconst fishes = {\n  fish1: {\n    name: \"Pacific Halibut\",\n    image: \"/images/hali.jpg\",\n    desc:\n      \"Everyone’s favorite white fish. We will cut it to the size you need and ship it.\",\n    price: 1724,\n    status: \"available\"\n  },\n\n  fish2: {\n    name: \"Lobster\",\n    image: \"/images/lobster.jpg\",\n    desc:\n      \"These tender, mouth-watering beauties are a fantastic hit at any dinner party.\",\n    price: 3200,\n    status: \"available\"\n  },\n\n  fish3: {\n    name: \"Sea Scallops\",\n    image: \"/images/scallops.jpg\",\n    desc:\n      \"Big, sweet and tender. True dry-pack scallops from the icey waters of Alaska. About 8-10 per pound\",\n    price: 1684,\n    status: \"unavailable\"\n  },\n\n  fish4: {\n    name: \"Mahi Mahi\",\n    image: \"/images/mahi.jpg\",\n    desc:\n      \"Lean flesh with a mild, sweet flavor profile, moderately firm texture and large, moist flakes. \",\n    price: 1129,\n    status: \"available\"\n  },\n\n  fish5: {\n    name: \"King Crab\",\n    image: \"/images/crab.jpg\",\n    desc:\n      \"Crack these open and enjoy them plain or with one of our cocktail sauces\",\n    price: 4234,\n    status: \"available\"\n  },\n\n  fish6: {\n    name: \"Atlantic Salmon\",\n    image: \"/images/salmon.jpg\",\n    desc:\n      \"This flaky, oily salmon is truly the king of the sea. Bake it, grill it, broil it...as good as it gets!\",\n    price: 1453,\n    status: \"available\"\n  },\n\n  fish7: {\n    name: \"Oysters\",\n    image: \"/images/oysters.jpg\",\n    desc: \"A soft plump oyster with a sweet salty flavor and a clean finish.\",\n    price: 2543,\n    status: \"available\"\n  },\n\n  fish8: {\n    name: \"Mussels\",\n    image: \"/images/mussels.jpg\",\n    desc:\n      \"The best mussels from the Pacific Northwest with a full-flavored and complex taste.\",\n    price: 425,\n    status: \"available\"\n  },\n\n  fish9: {\n    name: \"Jumbo Prawns\",\n    image: \"/images/prawns.jpg\",\n    desc:\n      \"With 21-25 two bite prawns in each pound, these sweet morsels are perfect for shish-kabobs.\",\n    price: 2250,\n    status: \"available\"\n  }\n};\n\nexport default fishes;\n","import React from 'react';\nimport { formatPrice } from \"../helpers\";\nimport PropTypes from \"prop-types\";\n\n\nclass Fish extends React.Component {\n\n    static propTypes = {\n        details: PropTypes.shape({\n            image: PropTypes.string,\n            name: PropTypes.string,\n            desc: PropTypes.string,\n            status: PropTypes.string,\n            // price: PropTypes.number\n        }),\n        addToOrder: PropTypes.func\n    }\n\n    handleClick = () => {\n        this.props.addToOrder(this.props.index);\n    }\n\n    render() {\n\n        // let's destructure the details array, and have a variable for each item inside.\n        // It's better than creating a single variable for each item\n        const { desc, image, name, price, status } = this.props.details;\n\n        // let's make a variable that check if our state value has available or not and returns a boolean \n        const isAvailable = status === 'available';\n\n        return (\n            <li className=\"menu-fish\">\n                <img src={image} alt={name} />\n                <h3 className=\"fish-name\">{name}\n                    <span className=\"price\">\n                        {formatPrice(price)}\n                    </span>\n                </h3>\n                <p>{desc}</p>\n                <button disabled={!isAvailable} onClick={this.handleClick}>\n                    {!isAvailable ? `Sold Out` : 'Add To Cart'}\n                </button>\n            </li>\n        )\n    }\n}\n\nexport default Fish;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport Header from './Header';\nimport Inventory from './Inventory';\nimport Order from './Order';\nimport sampleFishes from '../sample-fishes';\nimport Fish from './Fish';\nimport base from '../base';\n\nclass App extends React.Component {\n\n    static propType = {\n        match: PropTypes.object // match is an object inside the Router component\n    }\n\n    state = {\n        fishes: {},\n        order: {}\n    }\n\n    componentDidMount() {\n\n        const { params } = this.props.match;\n\n        // first reinstate our localstorage\n        const localStorageRef = localStorage.getItem(params.storeid);\n\n        // check if we actually have a store in there, and reinstate our order inside our state. We're using JSON.parse() to turn our string back to an object.\n        if (localStorageRef) {\n            this.setState({ order: JSON.parse(localStorageRef) });\n        }\n\n        // this.ref is different than the input refs we use to capture data 'React.createRef();'\n        // the below ref is the Firebase way to reference to a piece of data in our database.\n        // we're syncing the Firebase ref with our storeid variable. We're also adding /fishes as we want to focus on the fishes object for now.\n\n        this.ref = base.syncState(`${ params.storeid }/fishes`, {\n            context: this,\n            state: 'fishes'\n        });\n    }\n\n    // Now when we mount our component, we listening to updates hapening to our synced state. This is stored in our ref above. When leaving our APP we need to unlisten and remove our ref, to free up the memory.\n\n\n\n    // Localstorage allows us to store termporary data inside a pair of key and value. This information is available until client removes browser history, data, cookies etc.\n\n    // Since we are dealing with guest orders, we don't need to save this information on a database. The best solution should be a temporary one, that is available to the user while they're partially still on the web app( after a refresh or closing the app browser tab)\n\n    // First of all we need to listen to changes occuring on our app component, and more specifically our order object. for that we use componentDidUpdate() \n\n    // Inside we call our localStorage API, with the setItem method that will take 2 params. The store being used available through this.props, and the order object available through this.state\n\n    // We're using JSON.stringify() to turn our object into a string.\n\n    componentDidUpdate() {\n\n        // console.log(this.state.order);\n\n        localStorage.setItem(this.props.match.params.storeid, JSON.stringify(this.state.order));\n\n        // console.log(`it's updated!`);\n    }\n\n    // Now localStorage should work, however when refreshing, our componentDidMount() will reinstate the componentDidUpdate() method which will result in loosing the data inside our localstorage. The solution is to get the data inside our localstorage before we do anything inside our componentDidMount() and we can do it using the localStorage.getItem(itemID)\n\n    // So far the code above is good to go, however the App will still look up the inventory before loading fish data from Firebase and order data from localStorage, and for a split second, that will result in displaying \"Sorry fish is no longer available\" in our order list.\n\n    // To avoid this, we can use a simple if(!fish) return null in our Order component. This will stop the execution until we get our fish data from firebase and load our order data from the localstorage.\n\n    // Now we can try accessing another store and adding item to order, and if we go back to our first store we will still be able to see the order info, as we have them both saved on our localStorage.\n\n    // here's how we do it\n    componentWillUnmount() {\n        base.removeBinding(this.ref);\n    }\n\n\n    // Add Fish Method\n\n    addFish = fish => {\n\n        // 1. First take a copy of the existing state\n        const fishes = { ...this.state.fishes };\n\n        // 2. Add our new fish to those fishes. Using a timestamp we can set a unique ID to fish object, submitted from (in the reverse way) AddFishForm > Inventory > App\n\n        fishes[`fish${ Date.now() }`] = fish;\n\n        //3. Set the new fishes object to the fishes object we have in state.\n\n        this.setState({\n            fishes: fishes,  //the first fishes is our state object, and the 2nd is the new fishes object the user just added (which is 1 + 2)\n\n            // As of ES6, this syntaxt can be simplified to\n            // fishes,\n        })\n    }\n\n    // Load Sample Fishes Method\n\n    loadSampleFishes = () => {\n        this.setState({\n            fishes: sampleFishes,\n        })\n    }\n\n    // Creating a function to update our fishes in state. \n\n    // For this function We'll need a key to define the fish in question. This key will need to be added in our Inventory component inside our EditFishForm as a second key attribute. Remember that when dealing with iterators (i.e <EditFishForm />) that already have a key attribute and we needing to use that key inside our <EditFishForm /> we need to create an additional key attribute. Here, we'll call it index={key}\n\n    // We'll also need the updatedFish object wich we'll have ready in our EditFishForm\n\n    updateFish = (key, updatedFish) => {\n        // 1. take a copy of State\n        const fishes = { ...this.state.fishes };\n\n        // 2. update the fish in question\n        fishes[key] = updatedFish;\n\n        // 3. setState with the new fishes value\n        this.setState({ fishes });\n    }\n\n    deleteFish = (key) => {\n        const fishes = { ...this.state.fishes };\n\n        fishes[key] = null;\n\n\n        this.setState({ fishes: fishes });\n    }\n\n    // Add To Order Function\n    // To be able to use this method, we need to think where it will live => inside the Fish component. So we need to reference it as a propo down in the render() method.\n\n    addToOrder = (key) => {\n\n        // 1. Take a copy of state (Here we're more concerned about the order object inside our state)\n        const order = { ...this.state.order };\n\n        // 2. We need to either add to the order, or update the number in our order. Let's use the key value that we have inside of either fish item\n\n        order[key] = order[key] + 1 || 1;\n\n\n        // 3. Set state to update our state object.\n        this.setState({\n            order: order,\n        })\n\n    }\n\n\n    removeFromOrder = (key) => {\n        const order = { ...this.state.order };\n\n        if (order[key] > 1) {\n            order[key] = order[key] - 1\n        } else {\n            delete order[key];\n        }\n\n        this.setState({\n            order\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"catch-of-the-day\">\n                <div className=\"menu\">\n                    <Header tagline=\"Fresh SeaFood Market\" age={999} />\n\n                    <ul className=\"Fishes\">\n                        {Object.keys(this.state.fishes)\n                            .map(key => <Fish key={key} index={key} details={this.state.fishes[key]} addToOrder={this.addToOrder} />)}\n                    </ul>\n\n                </div >\n                <Order fishes={this.state.fishes} order={this.state.order} removeFromOrder={this.removeFromOrder} />\n                <Inventory addFish={this.addFish} updateFish={this.updateFish} deleteFish={this.deleteFish} loadSampleFishes={this.loadSampleFishes} fishes={this.state.fishes} storeId={this.props.match.params.storeid} />\n\n            </div >\n        )\n    }\n}\n\nexport default App;","import React from 'react'\n\nconst NotFound = () => (\n    <div>\n        <h2>\n            Sorry There's Nothing Here :(\n        </h2>\n    </div>\n)\n\nexport default NotFound;","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport StorePicker from './StorePicker'\nimport App from './App'\nimport NotFound from './NotFound'\n\nconst Router = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" component={StorePicker} />\n            <Route path=\"/store/:storeid\" component={App} />\n            <Route component={NotFound} />\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default Router;","//Some people only import the component module\n/* import { Component } from 'react';\nclass StorePicker extends Component {} */\n\n// Let's import the React package. We're not using {}, meaning that we're importing the whole package.\nimport React from 'react';\n\n// Importing the React Dom package. The render method is part of the react-dom package that contains other methods.\nimport { render } from 'react-dom';\nimport Route from './components/Router'\nimport './css/style.css';\n\nrender(<Route />, document.querySelector('#main'));\n\n\n// Now let's create more components each in its own file."],"sourceRoot":""}